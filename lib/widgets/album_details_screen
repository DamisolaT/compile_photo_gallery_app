// lib/widgets/album_details_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:photo_gallery_app/model/photo.dart';
import 'package:photo_gallery_app/services/gallery_service.dart';
import 'package:photo_gallery_app/widgets/photo_detail_screen.dart';

// Provider for fetching photos of an album
final photosProvider =
    FutureProvider.family<List<Photo>, int>((ref, albumId) async {
  final service = GalleryService();
  return service.fetchPhotos(albumId);
});

class AlbumDetailScreen extends ConsumerWidget {
  final int albumId;
  final String albumTitle; // ðŸ‘ˆ album title added

  const AlbumDetailScreen({
    super.key,
    required this.albumId,
    required this.albumTitle,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final photosAsync = ref.watch(photosProvider(albumId));

    return Scaffold(
      appBar: AppBar(
        title: Text(albumTitle), // ðŸ‘ˆ show album title
      ),
      body: photosAsync.when(
        data: (photos) {
          if (photos.isEmpty) {
            return const Center(child: Text("No photos available"));
          }
          return GridView.builder(
            padding: const EdgeInsets.all(8),
            itemCount: photos.length,
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 3,
              crossAxisSpacing: 4,
              mainAxisSpacing: 4,
            ),
            itemBuilder: (context, index) {
              final photo = photos[index];
              return GestureDetector(
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => PhotoDetailScreen(photo: photo),
                    ),
                  );
                },
                child: Image.network(
                  photo.thumbnailUrl,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      const Icon(Icons.broken_image),
                ),
              );
            },
          );
        },
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(
          child: Text("Error loading photos:\n$err"),
        ),
      ),
    );
  }
}
